// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type QuestionTypes string

const (
	QuestionTypesImg   QuestionTypes = "img"
	QuestionTypesAudio QuestionTypes = "audio"
)

func (e *QuestionTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QuestionTypes(s)
	case string:
		*e = QuestionTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for QuestionTypes: %T", src)
	}
	return nil
}

type NullQuestionTypes struct {
	QuestionTypes QuestionTypes `json:"question_types"`
	Valid         bool          `json:"valid"` // Valid is true if QuestionTypes is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQuestionTypes) Scan(value interface{}) error {
	if value == nil {
		ns.QuestionTypes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QuestionTypes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQuestionTypes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QuestionTypes), nil
}

type Answer struct {
	ID         int64              `json:"id"`
	QuestionID int64              `json:"question_id"`
	Text       string             `json:"text"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

type Choice struct {
	ID         int64              `json:"id"`
	QuestionID int64              `json:"question_id"`
	Text       string             `json:"text"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

type Phase struct {
	ID        int64              `json:"id"`
	QuizID    int64              `json:"quiz_id"`
	Name      string             `json:"name"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type Question struct {
	ID               int64              `json:"id"`
	PhaseID          int64              `json:"phase_id"`
	Text             string             `json:"text"`
	Types            QuestionTypes      `json:"types"`
	ImgUrl           pgtype.Text        `json:"img_url"`
	AudioUrl         pgtype.Text        `json:"audio_url"`
	IsMultipleChoice bool               `json:"is_multiple_choice"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
}

type Quiz struct {
	ID        int64              `json:"id"`
	Name      string             `json:"name"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}
