// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: choice.sql

package db

import (
	"context"
)

const createChoice = `-- name: CreateChoice :one
INSERT INTO choices (
  text, question_id
) VALUES (
  $1, $2 
)
RETURNING id, question_id, text, created_at
`

type CreateChoiceParams struct {
	Text       string `json:"text"`
	QuestionID int64  `json:"question_id"`
}

func (q *Queries) CreateChoice(ctx context.Context, arg CreateChoiceParams) (Choice, error) {
	row := q.db.QueryRow(ctx, createChoice, arg.Text, arg.QuestionID)
	var i Choice
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.Text,
		&i.CreatedAt,
	)
	return i, err
}

const deleteChoice = `-- name: DeleteChoice :exec
DELETE FROM choices
WHERE id = $1
`

func (q *Queries) DeleteChoice(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteChoice, id)
	return err
}

const listChoices = `-- name: ListChoices :many
SELECT id, question_id, text, created_at FROM choices
ORDER BY question_id DESC
LIMIT $1 OFFSET $2
`

type ListChoicesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListChoices(ctx context.Context, arg ListChoicesParams) ([]Choice, error) {
	rows, err := q.db.Query(ctx, listChoices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Choice
	for rows.Next() {
		var i Choice
		if err := rows.Scan(
			&i.ID,
			&i.QuestionID,
			&i.Text,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listChoicesByQuestion = `-- name: ListChoicesByQuestion :many
SELECT id, question_id, text, created_at FROM choices
WHERE question_id = $1
ORDER BY id DESC
`

func (q *Queries) ListChoicesByQuestion(ctx context.Context, questionID int64) ([]Choice, error) {
	rows, err := q.db.Query(ctx, listChoicesByQuestion, questionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Choice
	for rows.Next() {
		var i Choice
		if err := rows.Scan(
			&i.ID,
			&i.QuestionID,
			&i.Text,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChoice = `-- name: UpdateChoice :one
UPDATE choices
  set text = $2
WHERE id = $1
RETURNING id, question_id, text, created_at
`

type UpdateChoiceParams struct {
	ID   int64  `json:"id"`
	Text string `json:"text"`
}

func (q *Queries) UpdateChoice(ctx context.Context, arg UpdateChoiceParams) (Choice, error) {
	row := q.db.QueryRow(ctx, updateChoice, arg.ID, arg.Text)
	var i Choice
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.Text,
		&i.CreatedAt,
	)
	return i, err
}
