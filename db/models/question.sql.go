// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: question.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO questions (
  phase_id, text, types, img_url, audio_url, is_multiple_choice 
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, phase_id, text, types, img_url, audio_url, is_multiple_choice, created_at
`

type CreateQuestionParams struct {
	PhaseID          int64         `json:"phase_id"`
	Text             string        `json:"text"`
	Types            QuestionTypes `json:"types"`
	ImgUrl           pgtype.Text   `json:"img_url"`
	AudioUrl         pgtype.Text   `json:"audio_url"`
	IsMultipleChoice bool          `json:"is_multiple_choice"`
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, createQuestion,
		arg.PhaseID,
		arg.Text,
		arg.Types,
		arg.ImgUrl,
		arg.AudioUrl,
		arg.IsMultipleChoice,
	)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.PhaseID,
		&i.Text,
		&i.Types,
		&i.ImgUrl,
		&i.AudioUrl,
		&i.IsMultipleChoice,
		&i.CreatedAt,
	)
	return i, err
}

const deleteQuestion = `-- name: DeleteQuestion :exec
DELETE FROM phases
WHERE id = $1
`

func (q *Queries) DeleteQuestion(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteQuestion, id)
	return err
}

const getQuestion = `-- name: GetQuestion :one
SELECT id, phase_id, text, types, img_url, audio_url, is_multiple_choice, created_at FROM questions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetQuestion(ctx context.Context, id int64) (Question, error) {
	row := q.db.QueryRow(ctx, getQuestion, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.PhaseID,
		&i.Text,
		&i.Types,
		&i.ImgUrl,
		&i.AudioUrl,
		&i.IsMultipleChoice,
		&i.CreatedAt,
	)
	return i, err
}

const listQuestions = `-- name: ListQuestions :many
SELECT id, phase_id, text, types, img_url, audio_url, is_multiple_choice, created_at FROM questions
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListQuestionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListQuestions(ctx context.Context, arg ListQuestionsParams) ([]Question, error) {
	rows, err := q.db.Query(ctx, listQuestions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.PhaseID,
			&i.Text,
			&i.Types,
			&i.ImgUrl,
			&i.AudioUrl,
			&i.IsMultipleChoice,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuestion = `-- name: UpdateQuestion :one
UPDATE questions
  set text = $2,
  types = $3,
  img_url = $4,
  audio_url = $4,
  is_multiple_choice = $5
WHERE id = $1
RETURNING id, phase_id, text, types, img_url, audio_url, is_multiple_choice, created_at
`

type UpdateQuestionParams struct {
	ID               int64         `json:"id"`
	Text             string        `json:"text"`
	Types            QuestionTypes `json:"types"`
	ImgUrl           pgtype.Text   `json:"img_url"`
	IsMultipleChoice bool          `json:"is_multiple_choice"`
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, updateQuestion,
		arg.ID,
		arg.Text,
		arg.Types,
		arg.ImgUrl,
		arg.IsMultipleChoice,
	)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.PhaseID,
		&i.Text,
		&i.Types,
		&i.ImgUrl,
		&i.AudioUrl,
		&i.IsMultipleChoice,
		&i.CreatedAt,
	)
	return i, err
}
