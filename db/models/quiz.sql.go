// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: quiz.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createQuiz = `-- name: CreateQuiz :one
INSERT INTO quizzes (
  name
) VALUES (
  $1
)
RETURNING id, name, created_at
`

func (q *Queries) CreateQuiz(ctx context.Context, name string) (Quiz, error) {
	row := q.db.QueryRow(ctx, createQuiz, name)
	var i Quiz
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteQuiz = `-- name: DeleteQuiz :exec
DELETE FROM quizzes
WHERE id = $1
`

func (q *Queries) DeleteQuiz(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteQuiz, id)
	return err
}

const getFullQuiz = `-- name: GetFullQuiz :one
SELECT 
  q.id AS quiz_id,
  q.name AS quiz_name,
  p.id AS phase_id,
  p.name AS phase_name,
  qs.id AS phase_name,
  qs.text AS question_text,
  qs.types AS question_type,
  a.id AS answer_id,
  a.text AS answer_text,
  c.id AS choice_id,
  c.text AS choice_text
FROM quizzes q 
LEFT JOIN phases p ON q.id = p.quiz_id
LEFT JOIN questions qs ON p.id = qs.phase_id
LEFT JOIN answers a ON qs.id = a.question_id
LEFT JOIN choices c ON qs.id = c.question_id
WHERE q.id = $1
`

type GetFullQuizRow struct {
	QuizID       int64             `json:"quiz_id"`
	QuizName     string            `json:"quiz_name"`
	PhaseID      pgtype.Int8       `json:"phase_id"`
	PhaseName    pgtype.Text       `json:"phase_name"`
	PhaseName_2  pgtype.Int8       `json:"phase_name_2"`
	QuestionText pgtype.Text       `json:"question_text"`
	QuestionType NullQuestionTypes `json:"question_type"`
	AnswerID     pgtype.Int8       `json:"answer_id"`
	AnswerText   pgtype.Text       `json:"answer_text"`
	ChoiceID     pgtype.Int8       `json:"choice_id"`
	ChoiceText   pgtype.Text       `json:"choice_text"`
}

func (q *Queries) GetFullQuiz(ctx context.Context, id int64) (GetFullQuizRow, error) {
	row := q.db.QueryRow(ctx, getFullQuiz, id)
	var i GetFullQuizRow
	err := row.Scan(
		&i.QuizID,
		&i.QuizName,
		&i.PhaseID,
		&i.PhaseName,
		&i.PhaseName_2,
		&i.QuestionText,
		&i.QuestionType,
		&i.AnswerID,
		&i.AnswerText,
		&i.ChoiceID,
		&i.ChoiceText,
	)
	return i, err
}

const getQuiz = `-- name: GetQuiz :one
SELECT id, name, created_at FROM quizzes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetQuiz(ctx context.Context, id int64) (Quiz, error) {
	row := q.db.QueryRow(ctx, getQuiz, id)
	var i Quiz
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listQuizzes = `-- name: ListQuizzes :many
SELECT id, name, created_at FROM quizzes
ORDER BY created_at ASC
LIMIT $1 OFFSET $2
`

type ListQuizzesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListQuizzes(ctx context.Context, arg ListQuizzesParams) ([]Quiz, error) {
	rows, err := q.db.Query(ctx, listQuizzes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quiz
	for rows.Next() {
		var i Quiz
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuiz = `-- name: UpdateQuiz :one
UPDATE quizzes
  set name = $2
WHERE id = $1
RETURNING id, name, created_at
`

type UpdateQuizParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateQuiz(ctx context.Context, arg UpdateQuizParams) (Quiz, error) {
	row := q.db.QueryRow(ctx, updateQuiz, arg.ID, arg.Name)
	var i Quiz
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}
